import { createClient } from '@supabase/supabase-js'
import { ESocialXMLParser } from '../lib/esocial/xml-parser'
import * as fs from 'fs'
import * as path from 'path'

async function debugImport() {
  try {
    console.log('üîç Iniciando debug da importa√ß√£o...')
    
    // 1. Testar conex√£o com Supabase
    console.log('1. Testando conex√£o com Supabase...')
    const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
    const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY
    
    if (!supabaseUrl || !supabaseKey) {
      throw new Error('Vari√°veis de ambiente do Supabase n√£o encontradas')
    }
    
    const supabase = createClient(supabaseUrl, supabaseKey)
    
    // Testar conex√£o
    const { data, error } = await supabase.from('empresas').select('count').limit(1)
    if (error) {
      console.error('‚ùå Erro na conex√£o com Supabase:', error)
      return
    }
    console.log('‚úÖ Conex√£o com Supabase OK')
    
    // 2. Testar parser XML
    console.log('2. Testando parser XML...')
    const parser = new ESocialXMLParser()
    
    // 3. Listar arquivos XML
    const xmlDir = process.argv[3] || "C:\\Users\\caiol\\OneDrive\\Documentos\\GitHub\\MASTPROD-je\\XML EMPRESAS"
    console.log(`3. Listando arquivos em: ${xmlDir}`)
    
    if (!fs.existsSync(xmlDir)) {
      throw new Error(`Diret√≥rio n√£o encontrado: ${xmlDir}`)
    }
    
    const files = fs.readdirSync(xmlDir).filter(file => file.endsWith('.xml'))
    console.log(`‚úÖ Encontrados ${files.length} arquivos XML`)
    
    // 4. Testar parsing do primeiro arquivo
    if (files.length > 0) {
      const firstFile = files[0]
      const filePath = path.join(xmlDir, firstFile)
      console.log(`4. Testando parsing do arquivo: ${firstFile}`)
      
      const evento = await parser.parseXMLFile(filePath)
      console.log('‚úÖ Parse realizado com sucesso')
      console.log('Dados extra√≠dos:', {
        tipoEvento: evento.tipoEvento,
        cnpj: evento.cnpj,
        periodoApuracao: evento.periodoApuracao,
        dadosSize: evento.dados ? Object.keys(evento.dados).length : 0
      })
    }
    
    console.log('üéâ Debug conclu√≠do com sucesso!')
    
  } catch (error) {
    console.error('‚ùå Erro durante o debug:', error)
    if (error instanceof Error) {
      console.error('Stack trace:', error.stack)
    }
    process.exit(1)
  }
}

debugImport()