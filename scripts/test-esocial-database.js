#!/usr/bin/env node
/**
 * Script para testar integra√ß√£o eSocial diretamente no banco de dados
 * Verifica se os dados est√£o sendo armazenados corretamente
 */

const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

const CNPJ_TESTE = '03731608000184';

// Configurar cliente Supabase
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå Vari√°veis de ambiente do Supabase n√£o configuradas');
  console.error('   NEXT_PUBLIC_SUPABASE_URL:', !!supabaseUrl);
  console.error('   SUPABASE_SERVICE_ROLE_KEY:', !!supabaseServiceKey);
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseServiceKey);

/**
 * Testa conex√£o com o banco
 */
async function testConnection() {
  console.log('üîå === TESTE: CONEX√ÉO COM BANCO ===');
  
  try {
    const { data, error } = await supabase
      .from('empresas')
      .select('count')
      .limit(1);
    
    if (error) {
      console.log('‚ùå Erro na conex√£o:', error.message);
      return false;
    }
    
    console.log('‚úÖ Conex√£o com banco estabelecida');
    return true;
  } catch (error) {
    console.log('‚ùå Erro na conex√£o:', error.message);
    return false;
  }
}

/**
 * Verifica se a empresa existe
 */
async function checkEmpresa() {
  console.log('\nüè¢ === TESTE: VERIFICAR EMPRESA ===');
  
  try {
    const { data: empresa, error } = await supabase
      .from('empresas')
      .select('id, nome, cnpj, created_at')
      .eq('cnpj', CNPJ_TESTE)
      .single();
    
    if (error) {
      console.log('‚ùå Erro ao buscar empresa:', error.message);
      return null;
    }
    
    if (!empresa) {
      console.log('‚ùå Empresa n√£o encontrada');
      return null;
    }
    
    console.log('‚úÖ Empresa encontrada:');
    console.log(`   ID: ${empresa.id}`);
    console.log(`   Nome: ${empresa.nome}`);
    console.log(`   CNPJ: ${empresa.cnpj}`);
    console.log(`   Criada em: ${empresa.created_at}`);
    
    return empresa;
  } catch (error) {
    console.log('‚ùå Erro ao verificar empresa:', error.message);
    return null;
  }
}

/**
 * Verifica configura√ß√£o eSocial
 */
async function checkEsocialConfig(empresaId) {
  console.log('\n‚öôÔ∏è  === TESTE: CONFIGURA√á√ÉO ESOCIAL ===');
  
  try {
    const { data: config, error } = await supabase
      .from('esocial_config')
      .select('*')
      .eq('empresa_id', empresaId)
      .single();
    
    if (error) {
      console.log('‚ùå Erro ao buscar configura√ß√£o eSocial:', error.message);
      return null;
    }
    
    if (!config) {
      console.log('‚ùå Configura√ß√£o eSocial n√£o encontrada');
      return null;
    }
    
    console.log('‚úÖ Configura√ß√£o eSocial encontrada:');
    console.log(`   Tipo de certificado: ${config.tipo_certificado}`);
    console.log(`   Arquivo: ${config.certificado_arquivo}`);
    console.log(`   Status: ${config.ativo ? 'Ativo' : 'Inativo'}`);
    console.log(`   Thumbprint: ${config.thumbprint}`);
    
    return config;
  } catch (error) {
    console.log('‚ùå Erro ao verificar configura√ß√£o eSocial:', error.message);
    return null;
  }
}

/**
 * Verifica funcion√°rios existentes
 */
async function checkFuncionarios(empresaId) {
  console.log('\nüë• === TESTE: FUNCION√ÅRIOS EXISTENTES ===');
  
  try {
    const { data: funcionarios, error, count } = await supabase
      .from('funcionarios')
      .select('*', { count: 'exact' })
      .eq('empresa_id', empresaId)
      .limit(5);
    
    if (error) {
      console.log('‚ùå Erro ao buscar funcion√°rios:', error.message);
      return [];
    }
    
    console.log(`üìä Total de funcion√°rios: ${count || 0}`);
    
    if (funcionarios && funcionarios.length > 0) {
      console.log('‚úÖ Funcion√°rios encontrados (primeiros 5):');
      funcionarios.forEach((func, index) => {
        console.log(`   ${index + 1}. ${func.nome} - CPF: ${func.cpf} - Status: ${func.status}`);
      });
    } else {
      console.log('‚ö†Ô∏è  Nenhum funcion√°rio encontrado');
    }
    
    return funcionarios || [];
  } catch (error) {
    console.log('‚ùå Erro ao verificar funcion√°rios:', error.message);
    return [];
  }
}

/**
 * Verifica eventos eSocial
 */
async function checkEventosEsocial(empresaId) {
  console.log('\nüìã === TESTE: EVENTOS ESOCIAL ===');
  
  try {
    const { data: eventos, error, count } = await supabase
      .from('esocial_eventos')
      .select('*', { count: 'exact' })
      .eq('empresa_id', empresaId)
      .limit(5);
    
    if (error) {
      console.log('‚ùå Erro ao buscar eventos eSocial:', error.message);
      return [];
    }
    
    console.log(`üìä Total de eventos eSocial: ${count || 0}`);
    
    if (eventos && eventos.length > 0) {
      console.log('‚úÖ Eventos encontrados (primeiros 5):');
      eventos.forEach((evento, index) => {
        console.log(`   ${index + 1}. ${evento.tipo_evento} - Status: ${evento.status} - Criado: ${evento.created_at}`);
      });
    } else {
      console.log('‚ö†Ô∏è  Nenhum evento eSocial encontrado');
    }
    
    return eventos || [];
  } catch (error) {
    console.log('‚ùå Erro ao verificar eventos eSocial:', error.message);
    return [];
  }
}

/**
 * Testa inser√ß√£o de funcion√°rio de teste
 */
async function testInsertFuncionario(empresaId) {
  console.log('\n‚ûï === TESTE: INSERIR FUNCION√ÅRIO DE TESTE ===');
  
  const funcionarioTeste = {
    empresa_id: empresaId,
    nome: 'Jo√£o da Silva Teste',
    cpf: '12345678901',
    email: 'joao.teste@empresa.com',
    cargo: 'Analista de Sistemas',
    status: 'Ativo',
    data_admissao: '2024-01-15',
    salario: 5000.00,
    created_at: new Date().toISOString(),
    updated_at: new Date().toISOString()
  };
  
  try {
    // Verificar se j√° existe
    const { data: existente } = await supabase
      .from('funcionarios')
      .select('id')
      .eq('empresa_id', empresaId)
      .eq('cpf', funcionarioTeste.cpf)
      .single();
    
    if (existente) {
      console.log('‚ö†Ô∏è  Funcion√°rio de teste j√° existe');
      return existente;
    }
    
    // Inserir novo funcion√°rio
    const { data: novoFuncionario, error } = await supabase
      .from('funcionarios')
      .insert(funcionarioTeste)
      .select()
      .single();
    
    if (error) {
      console.log('‚ùå Erro ao inserir funcion√°rio:', error.message);
      return null;
    }
    
    console.log('‚úÖ Funcion√°rio de teste inserido com sucesso:');
    console.log(`   ID: ${novoFuncionario.id}`);
    console.log(`   Nome: ${novoFuncionario.nome}`);
    console.log(`   CPF: ${novoFuncionario.cpf}`);
    
    return novoFuncionario;
  } catch (error) {
    console.log('‚ùå Erro ao testar inser√ß√£o:', error.message);
    return null;
  }
}

/**
 * Fun√ß√£o principal
 */
async function main() {
  console.log('üß™ Testando integra√ß√£o eSocial no banco de dados...');
  console.log(`üè¢ CNPJ de teste: ${CNPJ_TESTE}\n`);
  
  // Testar conex√£o
  const connected = await testConnection();
  if (!connected) {
    console.log('\n‚ùå Falha na conex√£o com o banco. Abortando testes.');
    return;
  }
  
  // Verificar empresa
  const empresa = await checkEmpresa();
  if (!empresa) {
    console.log('\n‚ùå Empresa n√£o encontrada. Abortando testes.');
    return;
  }
  
  // Verificar configura√ß√£o eSocial
  const esocialConfig = await checkEsocialConfig(empresa.id);
  
  // Verificar funcion√°rios
  const funcionarios = await checkFuncionarios(empresa.id);
  
  // Verificar eventos eSocial
  const eventos = await checkEventosEsocial(empresa.id);
  
  // Testar inser√ß√£o de funcion√°rio
  const novoFuncionario = await testInsertFuncionario(empresa.id);
  
  // Resumo final
  console.log('\nüìä === RESUMO DOS TESTES ===\n');
  
  const results = [
    { name: 'Conex√£o com banco', success: connected },
    { name: 'Empresa encontrada', success: !!empresa },
    { name: 'Configura√ß√£o eSocial', success: !!esocialConfig },
    { name: 'Funcion√°rios existentes', success: funcionarios.length > 0 },
    { name: 'Eventos eSocial', success: eventos.length > 0 },
    { name: 'Inser√ß√£o de funcion√°rio', success: !!novoFuncionario }
  ];
  
  let successCount = 0;
  
  results.forEach(result => {
    const status = result.success ? '‚úÖ' : '‚ùå';
    console.log(`${status} ${result.name}`);
    
    if (result.success) {
      successCount++;
    }
  });
  
  console.log(`\nüìà Resultado: ${successCount}/${results.length} testes passaram`);
  
  if (empresa && esocialConfig) {
    console.log('\nüéâ INTEGRA√á√ÉO ESOCIAL: ‚úÖ CONFIGURA√á√ÉO B√ÅSICA OK!');
    console.log('\nüöÄ Status da integra√ß√£o:');
    console.log('   ‚úÖ Empresa cadastrada no sistema');
    console.log('   ‚úÖ Certificado digital configurado');
    console.log('   ‚úÖ Banco de dados acess√≠vel');
    console.log(`   ${funcionarios.length > 0 ? '‚úÖ' : '‚ö†Ô∏è'} Funcion√°rios: ${funcionarios.length} registros`);
    console.log(`   ${eventos.length > 0 ? '‚úÖ' : '‚ö†Ô∏è'} Eventos eSocial: ${eventos.length} registros`);
    
    console.log('\nüîÑ Pr√≥ximos passos:');
    console.log('   1. Testar sincroniza√ß√£o com eSocial (S-1000, S-1005, etc.)');
    console.log('   2. Implementar autentica√ß√£o nos endpoints REST');
    console.log('   3. Testar gera√ß√£o e envio de eventos');
    console.log('   4. Configurar monitoramento e logs');
  } else {
    console.log('\n‚ö†Ô∏è  INTEGRA√á√ÉO ESOCIAL: ‚ùå CONFIGURA√á√ÉO INCOMPLETA');
    console.log('\nüîß A√ß√µes necess√°rias:');
    if (!empresa) {
      console.log('   ‚ùå Cadastrar empresa no sistema');
    }
    if (!esocialConfig) {
      console.log('   ‚ùå Configurar certificado digital eSocial');
    }
  }
}

// Executar teste
main().catch(console.error);